# File to define some Julia functions to Quaternions
export real, imag, imagi, imagj, imagk,
       scalar, vector, float,
       ispure, isreal, isinteger, isfinite, isnan, isinf, iszero, isone,
       rand, randn, nrandn, randq, nrandq

   # Extract real and imaginary parts
   real(::Type{Quaternion{T}}) where {T} = T
   real(q::Quaternion{T}) where T <: Real = q.qs
   imag(q::Quaternion{T}) where T <: Real = Quaternion(q.qi,q.qj,q.qk) 

   imagi(q::Quaternion{T}) where T <: Real = q.qi
   imagj(q::Quaternion{T}) where T <: Real = q.qj
   imagk(q::Quaternion{T}) where T <: Real = q.qk

   imagi(q::Real) = zero(q)
   imagj(q::Real) = zero(q)
   imagk(q::Real) = zero(q)

   imagi(q::AbstractVector{T}) where T <: Real = zero(q)
   imagj(q::AbstractVector{T}) where T <: Real = zero(q)
   imagk(q::AbstractVector{T}) where T <: Real = zero(q)

   # Extract scalar and vector parts
   scalar(q::Quaternion{T}) where T <: Real = q.qs
   vector(q::Quaternion{T}) where T <: Real = Quaternion(q.qi,q.qj,q.qk) 
    float(q::Quaternion{T}) where T = convert(Quaternion{float(T)}, q)   
     
   # Check if a quaternion
   ispure(q::Quaternion)::Bool = iszero(q.qs)
   isreal(q::Quaternion)::Bool = iszero(imagi(q)) & iszero(imagj(q)) & iszero(imagk(q))
   isinteger(q::Quaternion)::Bool = isreal(q) & isinteger(real(q))
   isfinite(q::Quaternion)::Bool  = isfinite(real(q)) & isfinite(imagi(q)) & isfinite(imagj(q)) & isfinite(imagk(q))
   isnan(q::Quaternion)::Bool  = isnan(real(q)) | isnan(imagi(q)) | isnan(imagj(q)) | isnan(imagk(q))
   isinf(q::Quaternion)::Bool  = isinf(real(q)) | isinf(imagi(q)) | isinf(imagj(q)) | isinf(imagk(q))
   iszero(q::Quaternion)::Bool = iszero(real(q)) & iszero(imagi(q)) & iszero(imagj(q)) & iszero(imagk(q))
   isone(q::Quaternion)::Bool  = isone(real(q)) & iszero(imagi(q)) & iszero(imagj(q)) & iszero(imagk(q))

   # Extract imag of arrays ??
   for fn in (:imagi,:imagj,:imagk)
      @eval begin
         ($fn)(A::AbstractArray) = map(($fn),A)
      end
   end
   
   # Random numbers
   function Base.rand(r::Random.AbstractRNG, ::Random.SamplerType{Quaternion{T}}) where {T<:Number}
      tau = 2.0 .* pi

      x0 = rand(r,T)
     
      theta1 = rand(r,T) .* tau
      theta2 = rand(r,T) .* tau
      
      s1 = sin(theta1); s2 = sin(theta2);
      c1 = cos(theta1); c2 = cos(theta2);
      
      r1 = sqrt(one(T) - x0)
      r2 = sqrt(x0)

      return Quaternion(r1 .* s1, c1 .* r1, s2 .* r2, c2 .* r2)
   end
   
   function Base.randn(r::Random.AbstractRNG, ::Type{Quaternion{T}}) where {T<:Number}
      Quaternion(randn(r,T),randn(r,T),randn(r,T),randn(r,T))
   end
   
   function nrandn(r::Random.AbstractRNG, ::Type{Quaternion{T}}) where {T<:Number}
      normalize(randn(r,T),randn(r,T),randn(r,T),randn(r,T))
   end
   
   # Slower but easier
    randq() = Quaternion(randn(),randn(),randn(),randn())
   nrandq() = normalize(randq())   
